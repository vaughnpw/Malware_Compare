
const express = require('express');
const cors = require('cors');
const formidable = require('formidable');
const path = require('path');
const shortid = require('shortid');
const fs = require('fs');
const request = require('request');
const next = require('next');

const AWS = require('aws-sdk');
AWS.config.update({
  accessKeyId: "AKIAIB6ZWRRY7KTSEROQ",
  secretAccessKey: "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"
});
const s3 = new AWS.S3({apiVersion: '2006-03-01'});

const port = parseInt(process.env.PORT, 10) || 3000; 
const dev = process.env.NODE_ENV !== 'production';
const app = next({ dev });
const handle = app.getRequestHandler();

const createServer = () => { 
  const corsOptions = {
    origin: `http://localhost:${port}`
  };

  const server = express(); 
  // for cors preflight
  server.options('*', cors())
  server.use(function(req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    next();
  });

  // server.get('/_data/resources', (req, res) => {
  //   const itemData = api.getItem()
  //   res.json(itemData)
  // })

  server.get('*', cors(corsOptions), (req, res) => handle(req, res)); 

  server.post('/upload', cors(corsOptions), (req, res) => {
    var form = new formidable.IncomingForm();
    form.parse(req, (err, fields, files) => {
      console.log('fields: ', fields);
      console.log('file: ', files.file);
      var old_path = files.file.path;
      console.log('tmp file path: ', old_path);
      const uid = shortid.generate();
      const fileExt = path.extname(files.file.name);
      var new_path = `${__dirname}/files/file-${uid}${fileExt}`
      fs.rename(old_path, new_path, (err) => {
        if (err) {
          console.log('error with rename: ', err);
          throw err;
        }
        else {
          console.log('rename successful');
          const body = fs.createReadStream(`${__dirname}/files/file-${uid}${fileExt}`);
          s3.putObject(
            {
              Bucket: 'com.malware.compare',
              Key: `files/${files.file.name}`,
              Body: body
            }, (err, fileStored) => {
              if(err) {
                console.log('error with putObject: ', err);
                throw err;
              }
              else {
                console.log('file stored in s3: ', fileStored);
                fs.unlink(`${__dirname}/files/file-${uid}${fileExt}`, (err) => {
                  if(err) {
                    console.log('err with delete file: ', err);
                    throw err;
                  }
                  else {
                    console.log('file deleted from local');
                    res.end();
                  }
                });
              }
            }
          );
        }
      });
    });
  }); 

  return server; 
}; 

const server = createServer();

app.prepare()
.then(() => {
  server.listen(port, (err) => { 
    if (err) throw err; 
    console.log(`Ready on http://localhost:${port}`); 
  }); 
})
.catch((ex) => {
  console.error(ex.stack)
  process.exit(1)
})

exports.app = app; 
exports.server = server; 